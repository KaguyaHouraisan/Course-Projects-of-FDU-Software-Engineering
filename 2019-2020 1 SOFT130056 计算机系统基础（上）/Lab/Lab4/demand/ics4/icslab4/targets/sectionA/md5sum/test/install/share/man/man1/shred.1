.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.43.3.
.TH SHRED "1" "November 2019" "GNU coreutils 8.24" "User Commands"
.SH NAME
shred \- overwrite a file to hide its contents, and optionally delete it
.SH SYNOPSIS
.B shred
[\fIOPTION\fR]... \fIFILE\fR...
.SH DESCRIPTION
.\" Add any additional description here
.PP
Overwrite the specified FILE(s) repeatedly, in order to make it harder
for even very expensive hardware probing to recover the data.
.PP
If FILE is \-, shred standard output.
.PP
Mandatory arguments to long options are mandatory for short options too.
.TP
\fB\-f\fR, \fB\-\-force\fR
change permissions to allow writing if necessary
.TP
\fB\-n\fR, \fB\-\-iterations\fR=\fIN\fR
overwrite N times instead of the default (3)
.TP
\fB\-\-random\-source\fR=\fIFILE\fR
get random bytes from FILE
.TP
\fB\-s\fR, \fB\-\-size\fR=\fIN\fR
shred this many bytes (suffixes like K, M, G accepted)
.TP
\fB\-u\fR, \fB\-\-remove\fR[=\fIHOW\fR]
truncate and remove file after overwriting; See below
.TP
\fB\-v\fR, \fB\-\-verbose\fR
show progress
.TP
\fB\-x\fR, \fB\-\-exact\fR
do not round file sizes up to the next full block;
.IP
this is the default for non\-regular files
.TP
\fB\-z\fR, \fB\-\-zero\fR
add a final overwrite with zeros to hide shredding
.TP
\fB\-\-help\fR
display this help and exit
.TP
\fB\-\-version\fR
output version information and exit
.PP
Delete FILE(s) if \fB\-\-remove\fR (\fB\-u\fR) is specified.  The default is not to remove
the files because it is common to operate on device files like \fI/dev/hda\fP,
and those files usually should not be removed.
The optional HOW parameter indicates how to remove a directory entry:
\&'unlink' => use a standard unlink call.
\&'wipe' => also first obfuscate bytes in the name.
\&'wipesync' => also sync each obfuscated byte to disk.
The default mode is 'wipesync', but note it can be expensive.
.PP
CAUTION: Note that shred relies on a very important assumption:
that the file system overwrites data in place.  This is the traditional
way to do things, but many modern file system designs do not satisfy this
assumption.  The following are examples of file systems on which shred is
not effective, or is not guaranteed to be effective in all file system modes:
.PP
* log\-structured or journaled file systems, such as those supplied with
AIX and Solaris (and JFS, ReiserFS, XFS, Ext3, etc.)
.PP
* file systems that write redundant data and carry on even if some writes
fail, such as RAID\-based file systems
.PP
* file systems that make snapshots, such as Network Appliance's NFS server
.PP
* file systems that cache in temporary locations, such as NFS
version 3 clients
.PP
* compressed file systems
.PP
In the case of ext3 file systems, the above disclaimer applies
(and shred is thus of limited effectiveness) only in data=journal mode,
which journals file data in addition to just metadata.  In both the
data=ordered (default) and data=writeback modes, shred works as usual.
Ext3 journaling modes can be changed by adding the data=something option
to the mount options for a particular file system in the \fI/etc/fstab\fP file,
as documented in the mount man page (man mount).
.PP
In addition, file system backups and remote mirrors may contain copies
of the file that cannot be removed, and that will allow a shredded file
to be recovered later.
.SH AUTHOR
Written by Colin Plumb.
.SH "REPORTING BUGS"
GNU coreutils online help: <http://www.gnu.org/software/coreutils/>
.br
Report shred translation bugs to <http://translationproject.org/team/>
.SH COPYRIGHT
Copyright \(co 2015 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH "SEE ALSO"
Full documentation at: <http://www.gnu.org/software/coreutils/shred>
.br
or available locally via: info \(aq(coreutils) shred invocation\(aq
